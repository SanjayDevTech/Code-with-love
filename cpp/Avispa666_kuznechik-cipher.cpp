#include <cstring>
#include <iostream>
#include <cstdint>

class Kuznechik
{
public:
    uint8_t* encrypt(const uint8_t* key, const uint8_t* plaintext);
    uint8_t* decrypt(const uint8_t* key, const uint8_t* ciphertext);
private:
    void _encrypt(const uint8_t* in, uint8_t* out);
    void _decrypt(const uint8_t* in, uint8_t* out);
    void transfX(const uint8_t* a, const uint8_t* b, uint8_t* c);
    void transfS(const uint8_t* in, uint8_t *out);
    void transfRevS(const uint8_t* in, uint8_t *out);
    void transfR(uint8_t* vector);
    void transfRevR(uint8_t* vector);
    void transfL(const uint8_t* in, uint8_t* out);
    void transfRevL(const uint8_t* in, uint8_t* out);
    void F(const uint8_t* in1, const uint8_t* in2, uint8_t* out1, uint8_t* out2, const uint8_t* iterConst);
    void expandKey(const uint8_t* k1, const uint8_t* k2);
    void getConsts();
    uint8_t gfMul(uint8_t a, uint8_t b);
    const static int BLOCK_SIZE = 16;
    uint8_t iterKey[10][16];
    uint8_t iterConsts[32][16];
    constexpr static unsigned char Pi[256] = {
            0xFC, 0xEE, 0xDD, 0x11, 0xCF, 0x6E, 0x31, 0x16,
            0xFB, 0xC4, 0xFA, 0xDA, 0x23, 0xC5, 0x04, 0x4D,
            0xE9, 0x77, 0xF0, 0xDB, 0x93, 0x2E, 0x99, 0xBA,
            0x17, 0x36, 0xF1, 0xBB, 0x14, 0xCD, 0x5F, 0xC1,
            0xF9, 0x18, 0x65, 0x5A, 0xE2, 0x5C, 0xEF, 0x21,
            0x81, 0x1C, 0x3C, 0x42, 0x8B, 0x01, 0x8E, 0x4F,
            0x05, 0x84, 0x02, 0xAE, 0xE3, 0x6A, 0x8F, 0xA0,
            0x06, 0x0B, 0xED, 0x98, 0x7F, 0xD4, 0xD3, 0x1F,
            0xEB, 0x34, 0x2C, 0x51, 0xEA, 0xC8, 0x48, 0xAB,
            0xF2, 0x2A, 0x68, 0xA2, 0xFD, 0x3A, 0xCE, 0xCC,
            0xB5, 0x70, 0x0E, 0x56, 0x08, 0x0C, 0x76, 0x12,
            0xBF, 0x72, 0x13, 0x47, 0x9C, 0xB7, 0x5D, 0x87,
            0x15, 0xA1, 0x96, 0x29, 0x10, 0x7B, 0x9A, 0xC7,
            0xF3, 0x91, 0x78, 0x6F, 0x9D, 0x9E, 0xB2, 0xB1,
            0x32, 0x75, 0x19, 0x3D, 0xFF, 0x35, 0x8A, 0x7E,
            0x6D, 0x54, 0xC6, 0x80, 0xC3, 0xBD, 0x0D, 0x57,
            0xDF, 0xF5, 0x24, 0xA9, 0x3E, 0xA8, 0x43, 0xC9,
            0xD7, 0x79, 0xD6, 0xF6, 0x7C, 0x22, 0xB9, 0x03,
            0xE0, 0x0F, 0xEC, 0xDE, 0x7A, 0x94, 0xB0, 0xBC,
            0xDC, 0xE8, 0x28, 0x50, 0x4E, 0x33, 0x0A, 0x4A,
            0xA7, 0x97, 0x60, 0x73, 0x1E, 0x00, 0x62, 0x44,
            0x1A, 0xB8, 0x38, 0x82, 0x64, 0x9F, 0x26, 0x41,
            0xAD, 0x45, 0x46, 0x92, 0x27, 0x5E, 0x55, 0x2F,
            0x8C, 0xA3, 0xA5, 0x7D, 0x69, 0xD5, 0x95, 0x3B,
            0x07, 0x58, 0xB3, 0x40, 0x86, 0xAC, 0x1D, 0xF7,
            0x30, 0x37, 0x6B, 0xE4, 0x88, 0xD9, 0xE7, 0x89,
            0xE1, 0x1B, 0x83, 0x49, 0x4C, 0x3F, 0xF8, 0xFE,
            0x8D, 0x53, 0xAA, 0x90, 0xCA, 0xD8, 0x85, 0x61,
            0x20, 0x71, 0x67, 0xA4, 0x2D, 0x2B, 0x09, 0x5B,
            0xCB, 0x9B, 0x25, 0xD0, 0xBE, 0xE5, 0x6C, 0x52,
            0x59, 0xA6, 0x74, 0xD2, 0xE6, 0xF4, 0xB4, 0xC0,
            0xD1, 0x66, 0xAF, 0xC2, 0x39, 0x4B, 0x63, 0xB6
    };
    constexpr static unsigned char revPi[256] = {
            0xA5, 0x2D, 0x32, 0x8F, 0x0E, 0x30, 0x38, 0xC0,
            0x54, 0xE6, 0x9E, 0x39, 0x55, 0x7E, 0x52, 0x91,
            0x64, 0x03, 0x57, 0x5A, 0x1C, 0x60, 0x07, 0x18,
            0x21, 0x72, 0xA8, 0xD1, 0x29, 0xC6, 0xA4, 0x3F,
            0xE0, 0x27, 0x8D, 0x0C, 0x82, 0xEA, 0xAE, 0xB4,
            0x9A, 0x63, 0x49, 0xE5, 0x42, 0xE4, 0x15, 0xB7,
            0xC8, 0x06, 0x70, 0x9D, 0x41, 0x75, 0x19, 0xC9,
            0xAA, 0xFC, 0x4D, 0xBF, 0x2A, 0x73, 0x84, 0xD5,
            0xC3, 0xAF, 0x2B, 0x86, 0xA7, 0xB1, 0xB2, 0x5B,
            0x46, 0xD3, 0x9F, 0xFD, 0xD4, 0x0F, 0x9C, 0x2F,
            0x9B, 0x43, 0xEF, 0xD9, 0x79, 0xB6, 0x53, 0x7F,
            0xC1, 0xF0, 0x23, 0xE7, 0x25, 0x5E, 0xB5, 0x1E,
            0xA2, 0xDF, 0xA6, 0xFE, 0xAC, 0x22, 0xF9, 0xE2,
            0x4A, 0xBC, 0x35, 0xCA, 0xEE, 0x78, 0x05, 0x6B,
            0x51, 0xE1, 0x59, 0xA3, 0xF2, 0x71, 0x56, 0x11,
            0x6A, 0x89, 0x94, 0x65, 0x8C, 0xBB, 0x77, 0x3C,
            0x7B, 0x28, 0xAB, 0xD2, 0x31, 0xDE, 0xC4, 0x5F,
            0xCC, 0xCF, 0x76, 0x2C, 0xB8, 0xD8, 0x2E, 0x36,
            0xDB, 0x69, 0xB3, 0x14, 0x95, 0xBE, 0x62, 0xA1,
            0x3B, 0x16, 0x66, 0xE9, 0x5C, 0x6C, 0x6D, 0xAD,
            0x37, 0x61, 0x4B, 0xB9, 0xE3, 0xBA, 0xF1, 0xA0,
            0x85, 0x83, 0xDA, 0x47, 0xC5, 0xB0, 0x33, 0xFA,
            0x96, 0x6F, 0x6E, 0xC2, 0xF6, 0x50, 0xFF, 0x5D,
            0xA9, 0x8E, 0x17, 0x1B, 0x97, 0x7D, 0xEC, 0x58,
            0xF7, 0x1F, 0xFB, 0x7C, 0x09, 0x0D, 0x7A, 0x67,
            0x45, 0x87, 0xDC, 0xE8, 0x4F, 0x1D, 0x4E, 0x04,
            0xEB, 0xF8, 0xF3, 0x3E, 0x3D, 0xBD, 0x8A, 0x88,
            0xDD, 0xCD, 0x0B, 0x13, 0x98, 0x02, 0x93, 0x80,
            0x90, 0xD0, 0x24, 0x34, 0xCB, 0xED, 0xF4, 0xCE,
            0x99, 0x10, 0x44, 0x40, 0x92, 0x3A, 0x01, 0x26,
            0x12, 0x1A, 0x48, 0x68, 0xF5, 0x81, 0x8B, 0xC7,
            0xD6, 0x20, 0x0A, 0x08, 0x00, 0x4C, 0xD7, 0x74
    };
    constexpr static unsigned char koef[16] = {
            1, 148, 32, 133, 16, 194, 192, 1,
            251, 1, 192, 194, 16, 133, 32, 148
    };

};

constexpr unsigned char Kuznechik::Pi[256];
constexpr unsigned char Kuznechik::revPi[256];
constexpr unsigned char Kuznechik::koef[16];

uint8_t *Kuznechik::encrypt(const uint8_t *key, const uint8_t *plaintext)
{
    expandKey(key, key + BLOCK_SIZE);
    uint8_t* res = new uint8_t[BLOCK_SIZE];
    _encrypt(plaintext, res);
    return res;
}

uint8_t *Kuznechik::decrypt(const uint8_t *key, const uint8_t *ciphertext)
{
    expandKey(key, key + BLOCK_SIZE);
    uint8_t* res = new uint8_t[BLOCK_SIZE];
    _decrypt(ciphertext, res);
    return res;
}

void Kuznechik::_encrypt(const uint8_t *in, uint8_t *out)
{

    std::memcpy(out, in, BLOCK_SIZE);
    for (int i = 0; i < 9; ++i) {
        transfX(iterKey[i], out, out);
        transfS(out, out);
        transfL(out, out);
    }
    transfX(out, iterKey[9], out);
}

void Kuznechik::_decrypt(const uint8_t *in, uint8_t *out)
{
    std::memcpy(out, in, BLOCK_SIZE);
    transfX(out, iterKey[9], out);
    for (int i = 8; i >= 0; --i) {
        transfRevL(out, out);
        transfRevS(out, out);
        transfX(iterKey[i], out, out);
    }
}

void Kuznechik::transfX(const uint8_t *a, const uint8_t *b, uint8_t *c)
{
    for (int i = 0; i < BLOCK_SIZE; ++i) c[i] = a[i] ^ b[i];
}

void Kuznechik::transfS(const uint8_t *in, uint8_t* out)
{
    for (int i = 0; i < BLOCK_SIZE; ++i) out[i] = Pi[in[i]];
}

void Kuznechik::transfRevS(const uint8_t *in, uint8_t *out)
{
    for (int i = 0; i < BLOCK_SIZE; ++i) out[i] = revPi[in[i]];
}

void Kuznechik::transfR(uint8_t *vector)
{
    uint8_t a15 = 0;
    uint8_t temp[16];
    for (int i = 15; i >= 0; i--)
    {
        temp[i - 1] = vector[i];
        a15 ^= gfMul(vector[i], koef[i]);
    }
    temp[15] = a15;
    memcpy(vector, temp, BLOCK_SIZE);
}

void Kuznechik::transfRevR(uint8_t *vector)
{

    uint8_t a0;
    a0 = vector[15];
    uint8_t temp[16];
    for (int i = 0; i < 16; i++)
    {
        temp[i] = vector[i - 1];
        a0 ^= gfMul(temp[i], koef[i]);
    }
    temp[0] = a0;
    memcpy(vector, temp, BLOCK_SIZE);
}

void Kuznechik::transfL(const uint8_t *in, uint8_t *out)
{
    std::memcpy(out, in, BLOCK_SIZE);
    for (int i = 0; i < 16; ++i) transfR(out);
}

void Kuznechik::transfRevL(const uint8_t *in, uint8_t *out)
{
    std::memcpy(out, in, BLOCK_SIZE);
    for (int i = 0; i < 16; ++i) transfRevR(out);
}

void Kuznechik::F(const uint8_t *in1, const uint8_t *in2, uint8_t *out1, uint8_t *out2, const uint8_t *iterConst)
{
    uint8_t internal[BLOCK_SIZE];
    std::memcpy(out2, in1, BLOCK_SIZE);
    transfX(in1, iterConst, internal);
    transfS(internal, internal);
    transfL(internal, internal);
    transfX(internal, in2, out1);
}

void Kuznechik::expandKey(const uint8_t *k1, const uint8_t *k2)
{
    uint8_t it1[64];
    uint8_t it2[64];
    uint8_t it3[64];
    uint8_t it4[64];
    getConsts();
    memcpy(iterKey[0], k1, 64);
    memcpy(iterKey[1], k2, 64);
    memcpy(it1, k1, 64);
    memcpy(it2, k2, 64);
    for (int i = 0; i < 4; i++)
    {
        F(it1, it2, it3, it4, iterConsts[0 + 8 * i]);
        F(it3, it4, it1, it2, iterConsts[1 + 8 * i]);
        F(it1, it2, it3, it4, iterConsts[2 + 8 * i]);
        F(it3, it4, it1, it2, iterConsts[3 + 8 * i]);
        F(it1, it2, it3, it4, iterConsts[4 + 8 * i]);
        F(it3, it4, it1, it2, iterConsts[5 + 8 * i]);
        F(it1, it2, it3, it4, iterConsts[6 + 8 * i]);
        F(it3, it4, it1, it2, iterConsts[7 + 8 * i]);
        memcpy(iterKey[2 * i + 2], it1, 64);
        memcpy(iterKey[2 * i + 3], it2, 64);
    }
}

void Kuznechik::getConsts()
{
    uint8_t iter_num[32][16];
    for (int i = 0; i < 32; i++)
    {
        std::memset(iter_num[i], 0, BLOCK_SIZE);
        iter_num[i][0] = i+1;
    }
    for (int i = 0; i < 32; i++)
        transfL(iter_num[i], iterConsts[i]);
}

uint8_t Kuznechik::gfMul(uint8_t a, uint8_t b)
{
    uint8_t res = 0;
    uint8_t h = 0;
    for (int i = 0; i < BLOCK_SIZE; ++i) {
        if (b & 1) res ^= a;
        h = a & 0b10000000;
        a <<= 1;
        if (h) a ^= 0b11000011;
        b >>= 1;
    }
    return res;
}



void print(const unsigned char str[16])
{
    for (int i = 0; i < 16; i++)
        printf("%02x", str[i]);
    printf("\n");
}

int main(int argc, char *argv[])
{
    Kuznechik k;
    static const unsigned char testKey[32] = {
        0x77, 0x66, 0x55, 0x44, 0x33, 0x22, 0x11, 0x00,
        0xff, 0xee, 0xdd, 0xcc, 0xbb, 0xaa, 0x99, 0x88,
        0xef, 0xcd, 0xab, 0x89, 0x67, 0x45, 0x23, 0x01,
        0x10, 0x32, 0x54, 0x76, 0x98, 0xba, 0xdc, 0xfe
    };
    static const unsigned char testString[16] = {
        0x88, 0x99, 0xaa, 0xbb, 0xcc, 0xdd, 0xee, 0xff,
        0x00, 0x77, 0x66, 0x55, 0x44, 0x33, 0x22, 0x11

    };
    printf("%s", "original: ");
    print(testString);
    printf("%s", "encrypted: ");
    unsigned char* enc = k.encrypt(testKey,testString);
    print(enc);
    printf("%s", "decrypted: ");
    print(k.decrypt(testKey, enc));
    return 0;
}
